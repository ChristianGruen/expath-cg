<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="expath-file-bitwise">
  <description>Tests for the bitwise extension functions in the EXPath "binary" package. Note the
    tests are written on the assumption that the "working directory" for resolving relative
    filenames is the directory containing this test catalog file.</description>

  <environment name="binary-bitwise">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
    <namespace prefix="binJAVA" uri="java:org.expath.ns.binary.EXPathBinary"/>
    <namespace prefix="err" uri="http://expath.org/ns/binary"/>
    <param name="empty.bin" select="xs:base64Binary('')"/>
    <param name="a" select="xs:base64Binary(xs:hexBinary('F00F'))"/>
    <param name="b" select="xs:base64Binary(xs:hexBinary('0FF0'))"/>
    <param name="c" select="xs:base64Binary(xs:hexBinary('0FABCD'))"/>
  </environment>

  <expand name="binary-bitwise-or">
    <created by="John Lumley" on="2013-07-22"/>
    <environment ref="binary-bitwise"/>
    <test-case>
      <description>bitwise-or with differing lengths</description>
      <test> bin:or($a,$c) </test>
      <result>
        <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-or on empty sequences</description>
      <test> bin:or((),()) </test>
      <result>
        <assert-empty/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-or with data and empty sequence</description>
      <modified by="John Lumley" on="2013-11-13" change="change to empty sequence result"/>
      <test> bin:or($a,()) </test>
      <result>
        <assert-empty/>
        <!-- <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>-->
      </result>
    </test-case>
    <test-case>
      <description>bitwise-or with empty sequence and data</description>
      <modified by="John Lumley" on="2013-11-13" change="change to empty sequence result"/>
      <test> bin:or((),$a) </test>
      <result>
        <assert-empty/>
        <!--<error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>-->
      </result>
    </test-case>
    <test-case>
      <description>bitwise-or on empty binaries</description>
      <test> bin:or($empty.bin,$empty.bin) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary('')</assert-eq>
        </all-of>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-or with similar lengths</description>
      <test> bin:or($a,$b) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary(xs:hexBinary("FFFF"))</assert-eq>
        </all-of>
      </result>
    </test-case>
  </expand>

  <expand name="binary-bitwise-and">
    <created by="John Lumley" on="2013-07-22"/>
    <environment ref="binary-bitwise"/>
    <test-case>
      <description>bitwise-and with differing lengths</description>
      <test> bin:and($a,$c) </test>
      <result>
        <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-and on empty sequences</description>
      <test> bin:and((),()) </test>
      <result>
        <assert-empty/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-and with data and empty sequence</description>
      <modified by="John Lumley" on="2013-11-13" change="change to empty sequence result"/>
      <test> bin:and($a,()) </test>
      <result>
        <assert-empty/>
        <!--<error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>-->
      </result>
    </test-case>
    <test-case>
      <description>bitwise-and with empty sequence and data</description>
      <modified by="John Lumley" on="2013-11-13" change="change to empty sequence result"/>
      <test> bin:and((),$a) </test>
      <result>
        <assert-empty/>
        <!--<error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>-->
      </result>
    </test-case>
    <test-case>
      <description>bitwise-and on empty binaries</description>
      <test> bin:and($empty.bin,$empty.bin) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary('')</assert-eq>
        </all-of>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-and with similar lengths</description>
      <test> bin:and($a,$b) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary(xs:hexBinary("0000"))</assert-eq>
        </all-of>
      </result>
    </test-case>
  </expand>
  <expand name="binary-bitwise-xor">
    <created by="John Lumley" on="2013-07-22"/>
    <environment ref="binary-bitwise"/>
    <test-case>
      <description>bitwise-xor with differing lengths</description>
      <test> bin:xor($a,$c) </test>
      <result>
        <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-xor on empty sequences</description>
      <test> bin:xor((),()) </test>
      <result>
        <assert-empty/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-xor with data and empty sequence</description>
      <modified by="John Lumley" on="2013-11-13" change="change to empty sequence result"/>
      <test> bin:xor($a,()) </test>
      <result>
        <assert-empty/>
        <!--<error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>-->
      </result>
    </test-case>
    <test-case>
      <description>bitwise-xor with empty sequence and data</description>
      <modified by="John Lumley" on="2013-11-13" change="change to empty sequence result"/>
      <test> bin:xor((),$a) </test>
      <result>
        <assert-empty/>
        <!--<error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>-->
      </result>
    </test-case>
    <test-case>
      <description>bitwise-xor on empty binaries</description>
      <test> bin:xor($empty.bin,$empty.bin) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary('')</assert-eq>
        </all-of>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-xor with similar lengths</description>
      <test> bin:xor($a,$b) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary(xs:hexBinary("FFFF"))</assert-eq>
        </all-of>
      </result>
    </test-case>
  </expand>
  <expand name="binary-bitwise-not">
    <created by="John Lumley" on="2013-07-22"/>
    <environment ref="binary-bitwise"/>
    <test-case>
      <description>bitwise-not with empty data</description>
      <test> bin:not($empty.bin) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary(xs:hexBinary(""))</assert-eq>
        </all-of>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-not with non-empty data</description>
      <test> bin:not($a) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary(xs:hexBinary("0FF0"))</assert-eq>
        </all-of>
      </result>
    </test-case>
  </expand>

  <expand name="binary-bitwise-shift">
    <created by="John Lumley" on="2013-07-22"/>
    <environment ref="binary-bitwise"/>
    <test-case>
      <description>bitwise-shift on empty sequence</description>
      <test> bin:shift((),5) </test>
      <result>
        <assert-empty/>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift by 0 bits</description>
      <test> bin:shift($a,0) </test>
      <result>
        <all-of>
          <assert-type>xs:base64Binary</assert-type>
          <assert-eq>xs:base64Binary(xs:hexBinary("F00F"))</assert-eq>
        </all-of>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 1 bit</description>
      <test> xs:hexBinary(bin:shift($a,1)) </test>
      <result>

        <assert-eq>xs:hexBinary("E01E")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 4 bits</description>
      <test> xs:hexBinary(bin:shift($a,4)) </test>
      <result>

        <assert-eq>xs:hexBinary("00F0")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 8 bits</description>
      <test> xs:hexBinary(bin:shift($a,8)) </test>
      <result>

        <assert-eq>xs:hexBinary("0F00")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 9 bits</description>
      <test> xs:hexBinary(bin:shift($a,9)) </test>
      <result>

        <assert-eq>xs:hexBinary("1E00")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 12 bits</description>
      <test> xs:hexBinary(bin:shift($a,12)) </test>
      <result>

        <assert-eq>xs:hexBinary("F000")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 16 bits</description>
      <test> xs:hexBinary(bin:shift($a,16)) </test>
      <result>

        <assert-eq>xs:hexBinary("0000")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift left by 17 bits</description>
      <test> xs:hexBinary(bin:shift($a,17)) </test>
      <result>

        <assert-eq>xs:hexBinary("0000")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 1 bit</description>
      <test> xs:hexBinary(bin:shift($a,-1)) </test>
      <result>

        <assert-eq>xs:hexBinary("7807")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 4 bits</description>
      <test> xs:hexBinary(bin:shift($a,-4)) </test>
      <result>

        <assert-eq>xs:hexBinary("0F00")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 8 bits</description>
      <test> xs:hexBinary(bin:shift($a,-8)) </test>
      <result>

        <assert-eq>xs:hexBinary("00F0")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 9 bits</description>
      <test> xs:hexBinary(bin:shift($a,-9)) </test>
      <result>

        <assert-eq>xs:hexBinary("0078")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 12 bits</description>
      <test> xs:hexBinary(bin:shift($a,-12)) </test>
      <result>

        <assert-eq>xs:hexBinary("000F")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 16 bits</description>
      <test> xs:hexBinary(bin:shift($a,-16)) </test>
      <result>

        <assert-eq>xs:hexBinary("0000")</assert-eq>
      </result>
    </test-case>
    <test-case>
      <description>bitwise-shift right by 17 bits</description>
      <test> xs:hexBinary(bin:shift($a,-17)) </test>
      <result>

        <assert-eq>xs:hexBinary("0000")</assert-eq>
      </result>
    </test-case>
  </expand>


</test-set>
